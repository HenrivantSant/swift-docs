(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{142:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),p=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,m=u["".concat(o,".").concat(d)]||u[d]||f[d]||a;return t?i.a.createElement(m,c(c({ref:n},s),{},{components:t})):i.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<a;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},88:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var r=t(3),i=t(7),a=(t(0),t(142)),o={title:"Lifecycles"},c={unversionedId:"database/lifecycles",id:"database/lifecycles",isDocsHomePage:!1,title:"Lifecycles",description:"Every entity has a lifecycle. The lifecycle is a series of events that are triggered during the life of the entity. The events are:",source:"@site/docs/database/lifecycles.md",slug:"/database/lifecycles",permalink:"/swift-docs/docs/database/lifecycles",editUrl:"https://github.com/SwiftAPI/swift-docs/tree/main/docs/database/lifecycles.md",version:"current",sidebar:"docs",previous:{title:"Entity Behaviors",permalink:"/swift-docs/docs/database/entity-behaviors"},next:{title:"Driver",permalink:"/swift-docs/docs/database/driver"}},l=[{value:"Usage",id:"usage",children:[]}],s={toc:l};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Every entity has a lifecycle. The lifecycle is a series of events that are triggered during the life of the entity. The events are:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"onCreate"),Object(a.b)("li",{parentName:"ul"},"onUpdate"),Object(a.b)("li",{parentName:"ul"},"onDelete")),Object(a.b)("p",null,"It might be useful to undertake certain actions when an entity is created, updated, or deleted. The ORM provides a way to do this. It is called a lifecycle."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"It is also possible to modify data before it is saved to the database.")),Object(a.b)("p",null,"The hook into the lifecycle of an entity is done by implementing the ",Object(a.b)("inlineCode",{parentName:"p"},"Swift\\Orm\\Behavior\\LifecycleInterface"),"."),Object(a.b)("p",null,"The is no limit to the number of lifecycles that can be implemented."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-php"},"<?php declare( strict_types=1 );\n\nnamespace App\\Foo\\Repository;\n\nuse Swift\\Configuration\\ConfigurationInterface;\nuse Swift\\DependencyInjection\\Attributes\\Autowire;\nuse Swift\\Orm\\Behavior\\Event\\Mapper\\Command\\OnCreate;\nuse Swift\\Orm\\Behavior\\Event\\Mapper\\Command\\OnDelete;\nuse Swift\\Orm\\Behavior\\Event\\Mapper\\Command\\OnUpdate;\nuse Swift\\Orm\\Behavior\\LifeCycleInterface;\n\n#[Autowire]\nclass MovieLifeCycle implements LifeCycleInterface {\n    \n    public function __construct(\n        protected readonly ConfigurationInterface $configuration,\n    ) {\n    }\n    \n    /**\n     * @inheritDoc\n     */\n    public static function getEntityClass(): string {\n        return Movie::class;\n    }\n    \n    /**\n     * @inheritDoc\n     */\n    public function onCreate( OnCreate $event ): void {\n        // TODO: Implement onCreate() method.\n    }\n    \n    /**\n     * @inheritDoc\n     */\n    public function onUpdate( OnUpdate $event ): void {\n        // TODO: Implement onUpdate() method.\n    }\n    \n    /**\n     * @inheritDoc\n     */\n    public function onDelete( OnDelete $event ): void {\n        // TODO: Implement onDelete() method.\n    }\n    \n}\n")),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("p",null,"A possible use case could be to add a spamfilter to the movie entity."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-php"},"<?php declare( strict_types=1 );\n\nnamespace App\\Foo\\Repository;\n\nuse Swift\\Configuration\\ConfigurationInterface;\nuse Swift\\DependencyInjection\\Attributes\\Autowire;\nuse Swift\\Orm\\Behavior\\Event\\Mapper\\Command\\OnCreate;\nuse Swift\\Orm\\Behavior\\Event\\Mapper\\Command\\OnDelete;\nuse Swift\\Orm\\Behavior\\Event\\Mapper\\Command\\OnUpdate;\nuse Swift\\Orm\\Behavior\\LifeCycleInterface;\nuse App\\Foo\\Service\\SpamFilter;\n\n#[Autowire]\nclass MovieLifeCycle implements LifeCycleInterface {\n    \n    public function __construct(\n        protected readonly ConfigurationInterface $configuration,\n        protected readonly SpamFilter $spamFilter,\n    ) {\n    }\n    \n    /**\n     * @inheritDoc\n     */\n    public static function getEntityClass(): string {\n        return Movie::class;\n    }\n    \n    /**\n     * @inheritDoc\n     */\n    public function onCreate( OnCreate $event ): void {\n        $event->state->register( \n            'description', \n            $this->spamFilter->filter( \n                $event->state->get( 'description' )\n            ) \n         );\n    }\n    \n    /**\n     * @inheritDoc\n     */\n    public function onUpdate( OnUpdate $event ): void {\n        $event->state->register( \n            'description', \n            $this->spamFilter->filter( \n                $event->state->get( 'description' )\n            ) \n        );\n    }\n    \n    /**\n     * @inheritDoc\n     */\n    public function onDelete( OnDelete $event ): void {\n        // TODO: Implement onDelete() method.\n    }\n    \n}\n")))}p.isMDXComponent=!0}}]);