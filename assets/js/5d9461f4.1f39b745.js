(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{109:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return u}));var r=t(3),o=t(7),a=(t(0),t(148)),l={title:"Resolvers"},s={unversionedId:"graphql/resolvers",id:"graphql/resolvers",isDocsHomePage:!1,title:"Resolvers",description:"In basis most types will be assigned a Resolver as a closure when being built. However sometimes you might want to separate the resolver from the type. This is possible using a Resolver class. This is a class that extends Swift\\GraphQl\\Executor\\Resolver\\AbstractResolver. This class comes with some useful Security features like you might be used to from REST Controllers.",source:"@site/docs/graphql/resolvers.md",slug:"/graphql/resolvers",permalink:"/swift-docs/docs/graphql/resolvers",editUrl:"https://github.com/SwiftAPI/swift-docs/tree/main/docs/graphql/resolvers.md",version:"current",sidebar:"docs",previous:{title:"Middleware",permalink:"/swift-docs/docs/graphql/middleware"},next:{title:"Schema",permalink:"/swift-docs/docs/graphql/schema"}},i=[{value:"Usage",id:"usage",children:[]},{value:"Core Resolver",id:"core-resolver",children:[]}],c={toc:i};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"In basis most types will be assigned a Resolver as a closure when being built. However sometimes you might want to separate the resolver from the type. This is possible using a Resolver class. This is a class that extends ",Object(a.b)("inlineCode",{parentName:"p"},"Swift\\GraphQl\\Executor\\Resolver\\AbstractResolver"),". This class comes with some useful Security features like you might be used to from REST Controllers."),Object(a.b)("p",null,"The Resolver will be called after the default resolve and after the middleware. See the Core Resolver below for more information."),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("p",null,"The example below resolves a Query named 'SayHello'. Resolvers are executed after the default defined resolvers and middleware, but before the directives. "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-php"},"<?php declare( strict_types=1 );\n\nnamespace Swift\\GraphQl\\Tests\\Executor\\Resolver;\n\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse Swift\\GraphQl\\Attributes\\Resolve;\n\nclass TestResolver extends \\Swift\\GraphQl\\Executor\\Resolver\\AbstractResolver {\n    \n    #[Resolve( name: 'SayHello' )]\n    public function resolveSomething( $objectValue, $args, $context, ResolveInfo $info ): mixed {\n        // Resolve SayHello\n    \n        return $objectValue;\n    }\n    \n}\n")),Object(a.b)("h2",{id:"core-resolver"},"Core Resolver"),Object(a.b)("p",null,"See below the code for the Resolver to understand the flow."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-php"},"<?php declare( strict_types=1 );\n\nnamespace Swift\\GraphQl\\Executor;\n\n\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse Swift\\DependencyInjection\\Attributes\\Autowire;\nuse Swift\\GraphQl\\Executor\\Middleware\\ResolverMiddlewareExecutor;\nuse Swift\\GraphQl\\Executor\\Resolver\\ResolverCollector;\nuse Swift\\GraphQl\\Schema\\Registry;\n\n#[Autowire]\nclass Resolver {\n    \n    public static self $instance;\n    \n    public function __construct(\n        protected readonly ResolverCollector          $resolverCollector,\n        protected readonly ResolverMiddlewareExecutor $middlewareExecutor,\n    ) {\n        self::$instance = $this;\n    }\n    \n    public function resolve( $objectValue, $args, $context, ResolveInfo $info, ?callable $callback = null ): mixed {\n        $resolve = function ( $objectValue, $args, $context, $info ) use ( $callback, $ref ) {\n            if ( $callback ) {\n                $objectValue = $callback( $objectValue, $args, $context, $info );\n            } else {\n                $objectValue = self::getDefaultResolver()( $objectValue, $args, $context, $info );\n            }\n            \n            if ( $resolvers = $this->resolverCollector->get( $info->fieldDefinition->getName() ) ) {\n                foreach ( $resolvers as $resolver ) {\n                    $objectValue = $resolver[ 0 ]->{$resolver[ 1 ]}( $objectValue, $args, $context, $info );\n                }\n            }\n    \n            return $this->resolveDirectives( $objectValue, $args, $context, $info );\n        };\n        \n        return $this->middlewareExecutor->process( $objectValue, $args, $context, $info, $resolve );\n    }\n    \n    public static function wrapResolve( ?callable $callback ): \\Closure {\n        $instance = self::$instance;\n        \n        return static function ( $objectValue, $args, $context, ResolveInfo $info ) use ( $instance, $callback ) {\n            return $instance->resolve( $objectValue, $args, $context, $info, $callback );\n        };\n    }\n    \n    public static function getDefaultResolver(): callable {\n        return static function ( $objectValue, $args, $context, ResolveInfo $info ): mixed {\n            $fieldName = $info->fieldName;\n            $property  = null;\n            \n            if ( is_array( $objectValue ) || $objectValue instanceof \\ArrayAccess ) {\n                if ( isset( $objectValue[ $fieldName ] ) ) {\n                    $property = $objectValue[ $fieldName ];\n                }\n            } else if ( is_object( $objectValue ) ) {\n                if ( isset( $objectValue->{$fieldName} ) ) {\n                    $property = $objectValue->{$fieldName};\n                }\n            }\n            \n            if ( $property instanceof \\Closure ) {\n                return $property( $objectValue, $args, $context, $info );\n            }\n            if ( $property ) {\n                return $property;\n            }\n            \n            try {\n                $property = $objectValue?->{$fieldName} ?? null;\n            } catch ( \\Throwable ) {\n            }\n            \n            return $property instanceof \\Closure\n                ? $property( $objectValue, $args, $context, $info )\n                : $property;\n        };\n    }\n    \n    protected function resolveDirectives( $objectValue, $args, $context, ResolveInfo $info ): mixed {\n        if ( empty( $info->fieldNodes[ 0 ]->directives ) ) {\n            return $objectValue;\n        }\n        \n        foreach ( $info->fieldNodes[ 0 ]->directives as $directive ) {\n            $name = $directive->name->value;\n            /** @var \\GraphQL\\Type\\Definition\\Directive|null $instance */\n            $instance = Registry::$directivesMap[ $name ] ?? null;\n            \n            if ( ! $instance ) {\n                continue;\n            }\n            \n            if ( empty( $instance->config[ 'resolve' ] ) || ! is_callable( $instance->config[ 'resolve' ] ) ) {\n                continue;\n            }\n    \n            $objectValue = $instance->config[ 'resolve' ]( $objectValue, $this->getDirectiveArguments( $directive ), $context, $info, $directive );\n        }\n        \n        \n        return $objectValue;\n    }\n    \n    /**\n     * @inheritDoc\n     */\n    public function getDirectiveArguments( mixed $directiveNode ): array {\n        $arguments = [];\n        \n        foreach ( $directiveNode->arguments->getIterator() as $argument ) {\n            if ( property_exists( $argument->value, 'values' ) ) {\n                $arguments[ $argument->name->value ] = [];\n                foreach ( $argument->value->values->getIterator() as $value ) {\n                    $arguments[ $argument->name->value ][] = $value->value;\n                }\n            }\n            if ( property_exists( $argument->value, 'value' ) ) {\n                $arguments[ $argument->name->value ] = $argument->value->value;\n            }\n        }\n        \n        return $arguments;\n    }\n    \n    \n}\n")))}u.isMDXComponent=!0},148:function(e,n,t){"use strict";t.d(n,"a",(function(){return f})),t.d(n,"b",(function(){return v}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),u=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},f=function(e){var n=u(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},$=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=u(t),$=r,v=f["".concat(l,".").concat($)]||f[$]||p[$]||a;return t?o.a.createElement(v,s(s({ref:n},c),{},{components:t})):o.a.createElement(v,s({ref:n},c))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=$;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<a;c++)l[c]=t[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,t)}$.displayName="MDXCreateElement"}}]);