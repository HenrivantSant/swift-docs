(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{105:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var o=t(3),a=t(7),i=(t(0),t(121)),r={title:"Configuration"},c={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"The system uses Yaml for configuration.",source:"@site/docs/configuration.md",slug:"/configuration",permalink:"/swift-docs/docs/configuration",editUrl:"https://github.com/SwiftAPI/swift-docs/tree/master/docs/configuration.md",version:"current",sidebar:"docs",previous:{title:"Command line interface",permalink:"/swift-docs/docs/command-line-interface"},next:{title:"Introduction",permalink:"/swift-docs/docs/database/introduction"}},l=[{value:"Basic setup",id:"basic-setup",children:[]},{value:"Configuration scopes",id:"configuration-scopes",children:[]},{value:"Defining custom configuration",id:"defining-custom-configuration",children:[]},{value:"Reading the configuration",id:"reading-the-configuration",children:[]},{value:"Writing the configuration",id:"writing-the-configuration",children:[]}],s={toc:l};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The system uses ",Object(i.b)("a",{parentName:"p",href:"https://yaml.org/"},"Yaml")," for configuration."),Object(i.b)("h2",{id:"basic-setup"},"Basic setup"),Object(i.b)("p",null,"The basic app configuration setup is as below. Place these yaml files in the etc/config/ directory of your project. The configuration comes with three configuration files which are necessary. Security (security.yaml) will be preset for you and you don't need to change anything here if there's no need."),Object(i.b)("h4",{id:"appyaml"},"app.yaml"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"app:\n  # App name\n  name: Foo Bar App\n  # App mode (either develop or production)\n  mode: develop\n  # Enable/disable debug mode\n  debug: true\n  # Allow cross origin requests (returns 200 response for OPTIONS Request if no Route is matched)\n  allow_cors: true\n  # Default application timezone\n  timezone: Europe/Amsterdam\n\nrouting:\n  # Base url used in route matching. This is also useful on sub domains\n  baseurl: foo.bar.com\n\ngraphql:\n  # Enable/disable graphql \n  enabled: true\n  # Enable/disable introspection for graphql\n  enable_introspection: true\n\nlogging:\n  # Enable/disable mails for logger\n  enable_mail: true\n  # Mail from address\n  logging_mail_from: log@foo-bar.com\n  # Mail to address\n  logging_mail_to: log@foo-bar.com\n")),Object(i.b)("h4",{id:"databaseyaml"},"database.yaml"),Object(i.b)("p",null,"For more on the actual working of this, see the Database component."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"connection:\n  driver: mysqli\n  host: localhost\n  username: root\n  password: ''\n  database: foo_bar\n  port: 3306\n  prefix: 4593g_\n")),Object(i.b)("h4",{id:"securityyaml"},"security.yaml"),Object(i.b)("p",null,"For more on the actual working of this, see the Security component."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"enable_firewalls: true\n\nfirewalls:\n  main:\n    # limit login attempts, defaults to 5 per minute. Set to 0 to disable throttling\n    login_throttling:\n      max_attempts: 5\n\nrole_hierarchy:\n  ROLE_GUEST:\n  ROLE_USER:\n  ROLE_CLIENT: ['ROLE_USERS_LIST']\n  ROLE_ADMIN: ['ROLE_USERS_LIST']\n  ROLE_SUPER_ADMIN: ['ROLE_ADMIN']\n\naccess_decision_manager:\n  strategy: Swift\\Security\\Authorization\\Strategy\\AffirmativeDecisionStrategy\n  allow_if_all_abstain: false\n\naccess_control:\n")),Object(i.b)("h2",{id:"configuration-scopes"},"Configuration scopes"),Object(i.b)("p",null,"To organize configuration, this is split in into different categories called 'scopes'. "),Object(i.b)("p",null,"By default, there are three of those:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"app (etc/config/app.yaml)"),Object(i.b)("li",{parentName:"ul"},"database (etc/config/database.yaml)"),Object(i.b)("li",{parentName:"ul"},"security (etc/config/security.yaml)")),Object(i.b)("p",null,"All three scopes have their own drivers, but they're all available through the generic Configuration ",Object(i.b)("inlineCode",{parentName:"p"},"Swift\\Configuration\\ConfigurationInterface"),"."),Object(i.b)("h2",{id:"defining-custom-configuration"},"Defining custom configuration"),Object(i.b)("p",null,"It is highly likely that you might have the need for custom/additional configuration. This is easily possible. Swift checks the app directory for a config.yaml file. If it is present use it import app configuration files. See the example below.  "),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"app/config.yaml")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"imports:\n  - { resource: app/Foo/config.yaml }\n")),Object(i.b)("p",null,"Now let's add some configuration in there.  "),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"app/Foo/config.yaml")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"foo:\n    bar: example\n    lorem: ipsum\n")),Object(i.b)("h2",{id:"reading-the-configuration"},"Reading the configuration"),Object(i.b)("p",null,"To read the configuration you will have to inject the ",Object(i.b)("inlineCode",{parentName:"p"},"Swift\\Configuration\\Configuration")," class (or ",Object(i.b)("inlineCode",{parentName:"p"},"Swift\\Configuration\\ConfigurationInterface $configuration"),"). Simply calling the 'get' method is enough. The first argument is the name of the setting and the second one is the scope. Reading the app configuration uses the 'app' as scope."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// Get foo bar value from the example above\n$fooBarConfigurationValue = $this->configuration->get('foo.bar', 'app/Foo');\n\n// Check if app is in debug mode\n$isDebug = $this->configuration->get('app.debug', 'app');\n\n// Database username\n$databaseUsername = $this->configuration->get('connection.username', 'database');\n")),Object(i.b)("h2",{id:"writing-the-configuration"},"Writing the configuration"),Object(i.b)("p",null,"Writing the configuration works in the exact same matter. Note that is not possible to write to non-existing settings. Make sure the setting you're trying to write is defined on beforehand."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// Write to the previous foo.bar example\n$this->configuration->set('foo.bar', 'writing example', 'app/Foo');\n")))}u.isMDXComponent=!0},121:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return g}));var o=t(0),a=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),u=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(t),b=o,g=p["".concat(r,".").concat(b)]||p[b]||f[b]||i;return t?a.a.createElement(g,c(c({ref:n},s),{},{components:t})):a.a.createElement(g,c({ref:n},s))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var s=2;s<i;s++)r[s]=t[s];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);