(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{118:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var o=t(0),a=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},f=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,b=p["".concat(r,".").concat(f)]||p[f]||g[f]||i;return t?a.a.createElement(b,c(c({ref:n},l),{},{components:t})):a.a.createElement(b,c({ref:n},l))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var l=2;l<i;l++)r[l]=t[l];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},99:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return u}));var o=t(3),a=t(7),i=(t(0),t(118)),r={title:"Configuration"},c={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"The system uses Yaml for configuration.",source:"@site/docs/configuration.md",slug:"/configuration",permalink:"/docs/configuration",editUrl:"https://github.com/HenrivantSant/swift/docs/docs/configuration.md",version:"current",sidebar:"docs",previous:{title:"Command line interface",permalink:"/docs/command-line-interface"},next:{title:"Database layer",permalink:"/docs/database"}},s=[{value:"Basic setup",id:"basic-setup",children:[]},{value:"Configuration scopes",id:"configuration-scopes",children:[]},{value:"Reading the configuration",id:"reading-the-configuration",children:[]},{value:"Writing the configuration (from code)",id:"writing-the-configuration-from-code",children:[]}],l={toc:s};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The system uses ",Object(i.b)("a",{parentName:"p",href:"https://yaml.org/"},"Yaml")," for configuration."),Object(i.b)("h3",{id:"basic-setup"},"Basic setup"),Object(i.b)("p",null,"The basic app configuration setup is as below. Place this config.yaml file in the etc/config/ directory of your project. The configuration comes with three configuration which are necessary. Security will be preset for you and you don't need to change anything here if there's no need."),Object(i.b)("h4",{id:"appyaml"},"app.yaml"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"app:\n  # App name\n  name: API Henri\n  # App mode (either develop or production)\n  mode: develop\n  # Enable/disable debug mode\n  debug: true\n  # Allow cross origin requests (returns 200 response for OPTIONS Request if no Route is matched)\n  allow_cors: true\n  # Default application timezone\n  timezone: Europe/Amsterdam\n\nrouting:\n  # Base url used in route matching. This is also useful on sub domains\n  baseurl: api2.henrivantsant.com\n\ngraphql:\n  # Enable/disable introspection for graphql\n  enable_introspection: true\n\nlogging:\n  # Enable/disable mails for logger\n  enable_mail: true\n  # Mail from address\n  logging_mail_from: log@henrivantsant.com\n  # Mail to address\n  logging_mail_to: log@henrivantsant.com\n")),Object(i.b)("h4",{id:"databaseyaml"},"database.yaml"),Object(i.b)("p",null,"For more on the actual working of this, see the Database component."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"connection:\n  driver: mysqli\n  host: localhost\n  username: root\n  password: ''\n  database: foo_bar\n  port: 3306\n  prefix: 4593g_\n")),Object(i.b)("h4",{id:"securityyaml"},"security.yaml"),Object(i.b)("p",null,"For more on the actual working of this, see the Security component."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"enable_firewalls: true\n\nfirewalls:\n  main:\n    # limit login attempts, defaults to 5 per minute. Set to 0 to disable throttling\n    login_throttling:\n      max_attempts: 5\n\nrole_hierarchy:\n  ROLE_GUEST:\n  ROLE_USER:\n  ROLE_CLIENT: ['ROLE_USERS_LIST']\n  ROLE_ADMIN: ['ROLE_USERS_LIST']\n  ROLE_SUPER_ADMIN: ['ROLE_ADMIN']\n\naccess_decision_manager:\n  strategy: Swift\\Security\\Authorization\\Strategy\\AffirmativeDecisionStrategy\n  allow_if_all_abstain: false\n\naccess_control:\n")),Object(i.b)("h4",{id:"using-app-configuration"},"Using app configuration"),Object(i.b)("p",null,"It is not unthinkable that you might want some configuration for you specific app. This is possible. First make sure to add a config.yaml file the app directory. This is the entry point for app configuration. Here you import your app config."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"imports:\n  - { resource: app/Foo/config.yaml }\n")),Object(i.b)("p",null,"In the app/Foo directory also place a config.yaml file (as imported above)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"foo:\n    bar: example\n    lorem: ipsum\n")),Object(i.b)("h3",{id:"configuration-scopes"},"Configuration scopes"),Object(i.b)("p",null,"The configuration is build in scopes. The root configuration has a scope as well, but can be ignored. The configuration in the file 'app/Foo/config.yaml' Will be in the scope 'app/Foo'. The idea behind is to isolate configuration in groups."),Object(i.b)("h3",{id:"reading-the-configuration"},"Reading the configuration"),Object(i.b)("p",null,"To read the configuration you will have to inject the ",Object(i.b)("inlineCode",{parentName:"p"},"Swift\\Configuration\\Configuration")," class (or ",Object(i.b)("inlineCode",{parentName:"p"},"private Swift\\Configuration\\ConfigurationInterface $configuration"),"). Simply calling the 'get' method is enough. To get the value of bar from the example above would work like this ",Object(i.b)("inlineCode",{parentName:"p"},"$this->configuration->get('foo.bar', 'app/Foo');"),". The first argument is the name of the setting and the second one is the scope. Reading the root configuration uses the 'root' as scope. Checking whether the app in debug mode would work like this ",Object(i.b)("inlineCode",{parentName:"p"},"$this->configuration->get('app.debug', 'app');")," or getting the database username: ",Object(i.b)("inlineCode",{parentName:"p"},"$this->configuration->get('database.username', 'database');"),"."),Object(i.b)("h3",{id:"writing-the-configuration-from-code"},"Writing the configuration (from code)"),Object(i.b)("p",null,"Writing the configuration works in the exact same matter. Note that is not possible to write to non-existing settings. Make sure the already exist before. "),Object(i.b)("p",null,"Writing to the foo.bar setting as above would work as ",Object(i.b)("inlineCode",{parentName:"p"},"$this->configuration->set('foo.bar', 'writing example', 'app/Foo');"),". Note that this works exactly the same as getting a setting, except now the second parameter is the new value you wish to assign."))}u.isMDXComponent=!0}}]);